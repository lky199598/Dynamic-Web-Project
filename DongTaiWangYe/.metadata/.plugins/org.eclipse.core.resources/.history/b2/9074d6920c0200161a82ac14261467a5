package cifa;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class CiFa {
      
	private static char ch;
	private static String strToken;
	private static int index = 0;
	private static int line = 1;
	
	private static boolean noteTag  = false;
	
	private Map<Integer, String> keywords;
	private HashMap<String, Integer> punctuations;
	
	private static ArrayList<String> p = new ArrayList<String>();
	
	private static ArrayList<String> q = new ArrayList<String>();

	public static char getCh() {
		return ch;
	}

	public static void setCh(char ch) {
		CiFa.ch = ch;
	}

	public static String getStrToken() {
		return strToken;
	}

	public static void setStrToken(String strToken) {
		CiFa.strToken = strToken;
	}

	public HashMap<String, Integer> getPunctuations() {
		return punctuations;
	}

	public void setPunctuations(HashMap<String, Integer> punctuations) {
		this.punctuations = punctuations;
	}
	
	public CiFa()
	{
		this.keywords =  new HashMap<Integer, String>();
		keywords.put(1, "Program");
		keywords.put(2, "begin");
		keywords.put(3, "end");
		keywords.put(4, "var");
		keywords.put(5, "int");
		
		keywords.put(6, "and");
		keywords.put(7, "or");
		keywords.put(8, "not");
		keywords.put(9, "if");
		keywords.put(10, "then");
		keywords.put(11, "else");
		keywords.put(12, "while");
		keywords.put(13, "do");
	
		
		this.punctuations = new HashMap<String, Integer>();
		punctuations.put("+", 16);
		punctuations.put("*", 17);
		punctuations.put("(", 18);
		punctuations.put(")", 19);
		punctuations.put(",", 20);

		punctuations.put(";", 21);
		punctuations.put(":=", 22);
		punctuations.put(">", 23);
		punctuations.put(">=", 24);
		punctuations.put("<", 25);
		
		punctuations.put("<=", 26);
		punctuations.put(".", 27);
		punctuations.put("<>", 28);
		punctuations.put("=", 29);
		
	}
	
	public char GetChar(char[] array)
	{
		while ((array[index]) == ' ') 
		{    
			index++;   
		}     
		index++;// 提前指向下一个字符 
	    return array[index - 1]; 
	}
	public char getNextChar(char[] strChar) { 
		
		index++;   
		return strChar[index - 1]; 
	}
	
	public String contact(String token, char ch) 
	{  
		return token + String.valueOf(ch);  
	}
	
	
	public boolean findKeyword(String str) { 
		for(int i=0;i<13;i++){
			if(str.equalsIgnoreCase(this.keywords.get(i)))  
				return true; 
		}
	}
	
	public int getPunctuation(String str) {
		return this.punctuations.get(str); 
	}
	
	public boolean Clean() {  
		return true;
	}
	
	
	public void callError(int line) { 
		System.out.println("出现错误，错误位置在第" + line + "行,第" + index + "列"); 
	}
	
	public boolean exist(ArrayList<String> p,String strToken)
	{
		if(p.contains(getStrToken()))   
			return true;   
		else     
			return false;
	}
	
	public int getKeyWordKey(String str)
	{
		for(int i=1;i<=13;i++)   {  
			if(str.equalsIgnoreCase(this.keywords.get(i)))  
				return i;   }    
		return 10000;

	}
	
	
	 public int getindex(ArrayList<String> p,String Str) 
	 {
		 return p.lastIndexOf(Str)+1;
	 }
	
	
	
	
	
	public boolean analyse(char[] strArray)
	{
		//每次分析一行完成后就将index置0
		index = 0;
		char temp1;
		int rowLength = strArray.length;
		
		outer:while(index < rowLength){
			
			strToken = "";
			ch = GetChar(strArray);
			
			if(ch == ';')
			  System.out.println("(21, ;)");
			
			else
				if(ch == ':')
				{
					index++;
					System.out.println("(22, :=)");
				}
				
		else
			if(ch == '.')
				System.out.println("(27,.)");
		
			else if(ch == '>')
			{
				if((temp1 = this.getNextChar(strArray)) == '=')
			          System.out.println("(24, >=)");
				else
				{
					index--;
					System.out.println("(23, >)");
				}
			}
			
			else if(ch == '<')
			{
				if((temp1 = this.getNextChar(strArray)) == '=' )
			         System.out.println("(26, <=)");
				else
					if(temp1 == '>')
						System.out.println("(28, <>)");
					else
					{
						index--;
						System.out.println("(25, <)");
					}
			}
		
			
			else if(ch=='*'&& noteTag==false)
			{
				System.out.println("(17,*)");
			}
			
			else if (java.lang.Character.isLetter(ch) && noteTag==false) { 
				strToken = contact(strToken, ch);    
				ch = getNextChar(strArray);
				while ((java.lang.Character.isLetter(ch)) || (java.lang.Character.isDigit(ch)))
				{
					strToken = contact(strToken, ch);     
					ch = getNextChar(strArray); 
				}
				index--;
				if (findKeyword(strToken)) {       //System.out.println("(15," + strToken.toString() + ")\n");     
					int i=getKeyWordKey(strToken);    
					System.out.println("("+i+",--)");    
					} 
				
				else    
				{     
					if(!exist(p,strToken))       
						p.add(strToken);      
					
					int i=getindex(p,strToken);
					//System.out.println("(14," + strToken.toString() + ")\n");    
					System.out.println("(14,"+i+")"); 
				}
				
		    }
			else if (java.lang.Character.isDigit(ch)&&noteTag==false)
			{     
				strToken = this.contact(strToken, ch);   
				ch = this.getNextChar(strArray);    
				while (java.lang.Character.isDigit(ch)) 
				{      
					strToken = this.contact(strToken, ch);     
					ch = this.getNextChar(strArray);   
					}     
				index--;
			}
			if(!exist(q,strToken))     
				q.add(strToken);                
			int i=getindex(q,strToken);           
			System.out.println("(15,"+i+")");   
			strToken = "";
			}
		
		   else if (ch == '/'||noteTag==true) {
			   int startj=index; //注释起始位置标记    
			   int starti=line;
			   
		   if(noteTag==false)
		   {             
			   //System.out.println("该部分是注释注释，从第"+starti+"行第"+startj+"列开始");  
		   } 
		   
		   char temp = this.getNextChar(strArray);    
		   if (temp == '*'&& noteTag==false)
		   {    
			   temp = this.getNextChar(strArray);
			   while(index<rowLength)
			   {      
				   temp = this.getNextChar(strArray);     
			       if(temp=='*'&&( temp1=this.getNextChar(strArray))=='/') 
			       {
				        index--;    
				        break; 
			       }
			       
			       if(index>=rowLength)
			       {
			    	   noteTag=true;   
			    	   break outer; 
			       }
				   
			   }
		   }
	}
	
		   
         public static void main(String args[])
         { 
			   File file = new File("F:\\sample.txt"); 
			   CiFa a = new CiFa();    
			   char[] strChar = new char[100];// 限制每行代码字符数不超过100 

               BufferedReader reader = null;	   
               try
               {     
            	   //System.out.println("以行为单位读取文件内容，一次读一整行：");    
            	   reader = new BufferedReader(new FileReader(file));   
            	   String tempString = null;   
            	   // int line = 1; 
            	   while ((tempString = reader.readLine()) != null)
            	   {   
            		   // 显示行号  
            		   //System.out.println("line " + line + ": " + tempString);
            		   strChar = tempString.toCharArray();    
            		   boolean flag = a.analyse(strChar); 
            		   if (flag == true)    
            			   line++;     
            		   else {     
            			   a.callError(line);     
            			   break;    
            			   } 
            	   }
            	   System.out.println("标示符表");    
            	   System.out.println(p.toString());  
            	   System.out.println("常数表"); 
            	   System.out.println(q.toString());    
            	   reader.close(); 
            	   
            	   catch (IOException e) { 
            		     e.printStackTrace();            	              	               	   
               }
            	   finally {    
            		   if (reader != null)  
            			   try {    
            				   reader.close();     
            				   }
            		   catch (IOException e1) {   
            			   // TODO Auto-generated catch block     
            			   e1.printStackTrace();  
            			   }
            		   }
            			   }
            	   }
		   }
		   
	
}
