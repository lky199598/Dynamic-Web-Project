package FrameWork;

import java.util.HashSet;


public class HashSetClass {
	
	public static void add(HashSet<String> hash)
	{
		Student[] s = new Student[4];
		s[1] = new Student(1);
	    s[2] = new Student(2);
		s[3] = new Student(3);
		s[4] = new Student(3);
		for(int i=0; i<4; i++)
			s[i] = new Student(i)
	}
	
	public static void remove(HashSet<String> hash)
	{
		hash.remove(hash);
		hash.remove(hash);	
	}
	
	public static void query(HashSet<String> hash)
	{
			
	}
	
public static void main(String[] args) {

	
}


}

class Student
{
	int id;
	String name;
	double grade;
	
	public Student(int id)
	{
		this.id = id;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(grade);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + id;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Student other = (Student) obj;
		if (Double.doubleToLongBits(grade) != Double
				.doubleToLongBits(other.grade))
			return false;
		if (id != other.id)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}
	
}

