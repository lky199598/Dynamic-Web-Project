package FrameWork;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class HashMapClass {
	public void put(HashMap<Student, Integer> goods)
	{
		goods.put
	}
	
	public void query1(HashMap<Student, Integer> goods)
	{	
		//entrySet() 返回此映射所包含的映射关系的 Set 视图
		Set< Entry<Student, Integer> > entry = goods.entrySet();
		
		for (Entry<Student, Integer> e : entry) {
			System.out.println(e.getKey() + "\t" + e.getValue());
		}
		System.out.println();
	}
	
	
	public void query2(HashMap<Student, Integer> goods)
	{	

		//第二种方法
		Iterator< Map.Entry<Student, Integer> > iterator=goods.entrySet().iterator();
		while(iterator.hasNext())
		{
			Map.Entry<String, Integer> entry = iterator.next();
			System.out.println(entry.getKey()+"\t"+entry.getValue());
		}
		System.out.println();
	}
	
	
	
	public static void main(String[] args)
	{
		
	Map<Student, Integer> goods = new HashMap<Student, Integer>();
	}

	// Set<Map.Entry<K,V>> entrySet() 返回此映射所包含的映射关系的 Set 视图。
	

	
	
	

	
	
	//第三种方法
	// Set<K> keySet()    返回此映射中所包含的键的 Set 视图。 
	System.out.println();
	for (String key : goods.keySet()) {
	System.out.println(key+"\t"+goods.get(key));
	}
	
	//第四种方法
	System.out.println();
	Set<Entry<String, Integer>> entrySet = goods.entrySet();
	for (Entry<String, Integer> entry : entrySet) {
		System.out.println(entry.getKey()+"\t"+entry.getValue());
	}*/
}
}


class Students
{
    private int age;
    private String name;
    
    Students(String name,int age)
    {
        this.age = age;
        this.name = name;
    }
 
 
    public int getAge() {
		return age;
	}


	public void setAge(int age) {
		this.age = age;
	}


	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public String toString()
    {
        return name+"::"+age;
    }


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + age;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Students other = (Students) obj;
		if (age != other.age)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}
       
}