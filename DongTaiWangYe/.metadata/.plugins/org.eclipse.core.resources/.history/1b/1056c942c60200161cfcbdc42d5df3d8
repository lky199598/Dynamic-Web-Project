package cifa;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class CiFa {

	private char ch;
	private String strToken;
	private int index = 0;
	
	private static int line = 1;

	private HashMap<String, Integer> keyValue;

	public char getCh() {
		return ch;
	}

	public  void setCh(char ch) {
		this.ch = ch;
	}

	public  String getStrToken() {
		return strToken;
	}

	public void setStrToken(String strToken) {
		this.strToken = strToken;
	}

	public HashMap<String, Integer> getPunctuations() {
		return punctuations;
	}

	public void setPunctuations(HashMap<String, Integer> punctuations) {
		this.punctuations = punctuations;
	}

	public CiFa() 
	{
		keyValue = new HashMap<String, Integer>();		
		keyValue.put("Program", 1);
		keyValue.put("begin", 2);
		keyValue.put("end", 3);
		keyValue.put("var", 4);
		keyValue.put("int",5);

		keyValue.put("and", 6);
		keyValue.put("or",7);
		keyValue.put("not", 8);
		keyValue.put("if",9);
		keyValue.put("then", 10);
		keyValue.put("else", 11);
		keyValue.put("while", 12);
		keyValue.put("do", 13);

		keyValue.put("+", 16);
		keyValue.put("*", 17);
		keyValue.put("(", 18);
		keyValue.put(")", 19);
		keyValue.put(",", 20);

		keyValue.put(";", 21);
		keyValue.put(":=", 22);
		keyValue.put(">", 23);
		keyValue.put(">=", 24);
		keyValue.put("<", 25);

		keyValue.put("<=", 26);
		keyValue.put(".", 27);
		keyValue.put("<>", 28);
		keyValue.put("=", 29);

	}

	public char GetChar(char[] array) {
		
		/*System.out.println("index: "+(index));
		System.out.println("strChar.length: "+array.length);
		System.out.println("array[index]: "+array[index]);
		*/
		while (index < array.length && array[index] == ' ')
		{	
			index++;
		}		
		index++;// 提前指向下一个字符
		if(index > array.length)
			return ' ';
		return array[index - 1];
	}

	public char getNextChar(char[] strChar) 
	{
		index++;
		return strChar[index - 1];		
	}

	public String contact(String token, char ch) {
		return token + String.valueOf(ch);
	}

	public int findValue(String str) {
		
		return keyValue.get(str);
	}


	public boolean Clean() {
		return true;
	}

	public void callError(int line) {
		System.out.println("出现错误，错误位置在第" + line + "行,第" + index + "列");
	}

	public boolean exist(ArrayList<String> p, String strToken) {
		if(p.contains(getStrToken()))
			return true;
		else
			return false;
	}


	public int getindex(ArrayList<String> p, String Str) {
		return p.lastIndexOf(Str) + 1;
	}

	public boolean analyse(char[] strArray) {

		index = 0; // 每次分析一行完成后就将index置0

		char temp1;

	    while (index < strArray.length)
		{

			strToken = "";
			ch = GetChar(strArray);

			if(ch=='+')
				System.out.println("( +, "+findValue(String.valueOf(ch))+")");
			
			if (ch == ';')
				System.out.println("(21, ;)");

			else if (ch == ':') {
				index++;
				System.out.println("(22, :=)");
			}
			else if (ch == '=')
				System.out.println("(26, =");
			
			else if (ch == '.')
				System.out.println("(27,.)");
			

			else if (ch == '>') {
				if ((temp1 = this.getNextChar(strArray)) == '=')
					System.out.println("(24, >=)");
				else {
					index--;
					System.out.println("(23, >)");
				}
			}

			else if (ch == '<') {
				if ((temp1 = getNextChar(strArray)) == '=')
					System.out.println("(26, <=)");
				else if (temp1 == '>')
					System.out.println("(28, <>)");
				else {
					index--;
					System.out.println("(25, <)");
				}
			}

			else if (ch == '*') {
				System.out.println("(17,*)");
			}

			else if (Character.isLetter(ch))
			{
				strToken = contact(strToken, ch);
				
				if(index == strArray.length)
					break;
				ch = getNextChar(strArray);
				//如果字符为字母，则返回 true；否则返回 false
				//  确定指定字符是否为数字
				while ( index < strArray.length && ( (Character.isLetter(ch))
						|| (Character.isDigit(ch)) ) ) {
					strToken = contact(strToken, ch);
					ch = getNextChar(strArray);
				}
				
				index--;
				
				if ( findKeyword(strToken) ) { 

					int i = getKeyWordKey(strToken);
					System.out.println("(" + i + ","+strToken+")");
				}

				else {
					System.out.println("(14, " + strToken + ")");
				}

			}

			else if (Character.isDigit(ch)) {
				strToken = contact(strToken, ch);
				
				ch = getNextChar(strArray);
				while (index < strArray.length && Character.isDigit(ch)) 
				{
					strToken = contact(strToken, ch);
					ch = getNextChar(strArray);
				}
				
				index--;
				
				System.out.println("(15," + strToken + ")");
				strToken = "";
			}

		}

		return true;
	}

	public static void main(String args[]) {
		File file = new File("F:\\CiFa.txt");
		CiFa a = new CiFa();
		
		
		BufferedReader reader = null;
		try {
			// System.out.println("以行为单位读取文件内容，一次读一整行：");
			reader = new BufferedReader(new FileReader(file));
			String tempString = null;

			while ((tempString = reader.readLine()) != null) {
				char[] strChar = new char[100];// 限制每行代码字符数不超过100
				strChar = tempString.toCharArray();
				System.out.println("tempString: "+tempString);
				
				boolean flag = a.analyse(strChar);
				
				if (flag == true)
					line++;
				else {
					a.callError(line);
					break;
				}
			}
			reader.close();

		}

		catch (IOException e) {
			e.printStackTrace();
		}
		
		finally 
		{
			if(reader != null)
				try
			{
					reader.close();
				} 
			   catch (IOException e1) {

					e1.printStackTrace();
				}
		}

	}
}
