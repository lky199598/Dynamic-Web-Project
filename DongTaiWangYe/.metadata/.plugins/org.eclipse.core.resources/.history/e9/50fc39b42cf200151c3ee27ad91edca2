package DynamicProxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;

/*
 * 代理处理器类ProxyHandler:
 */

/*
 * 该类实现了Java反射包中的InvocationHandler接口。
 * 代理实例调用方法时，将对方法调用指派到它的代理处理器程序的invoke方法中。
 * invoke方法内部实现预处理，对委托类方法调用，事后处理等逻辑。
 * 最后是入口程序:
 */
public class ProxyHandler implements InvocationHandler{
	private Object concreteClass;
	
	public ProxyHandler(Object concreteClass){
		this.concreteClass=concreteClass;
	}

	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		
		System.out.println("");
		System.out.println("proxy:"+proxy.getClass().getName());
		System.out.println("method:"+method.getName());
		System.out.println("args:"+args[0].getClass().getName());
		
		System.out.println("Before invoke method...");
		Object object=method.invoke(concreteClass, args);
		
		//普通的Java反射代码,通过反射执行某个类的某方法
		//System.out.println(((ConcreteClass)concreteClass).targetMethod(10)+(Integer)args[0]);
		
		System.out.println("After invoke method...");
		return object;
	}

}