package Proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Date;

interface IHello{
	/**
	 * 业务方法
	 * 
	 * @param str
	 */
	void sayHello(String str);
}

/*
 * 目标类代码：
 */
class Hello implements IHello{
	@Override
	public void sayHello(String str) {
		System.out.println("hello " + str);
	}
}


class Logger{
	public static void start() {
		System.out.println(new Date() + " say hello start...");
	}

	public static void end() {
		System.out.println(new Date() + " say hello end");
	}
}


public class DynaProxyHello implements InvocationHandler {
	private Object target;// 目标对象

	/**
	 * 通过反射来实例化目标对象
	 * 
	 * @param object
	 * @return
	 */
	public Object bind(Object object) {
		this.target = object;
		return Proxy.newProxyInstance(this.target.getClass().getClassLoader(),
				this.target.getClass().getInterfaces(), this);
	}

	@Override
	public Object invoke(Object proxy, Method method, Object[] args)
			throws Throwable{
		System.out.println("proxy: "+proxy.getClass().getName());
		Object result = null;
		Logger.start();// 添加额外的方法		
		
		// 通过反射机制来运行目标对象的方法
		result = method.invoke(this.target, args);
		System.out.println("method: "+method.getName());
		System.out.println("method: "+method.getName());
		
		Logger.end();
		return result;
	}
	
	public static void main(String[] args) {
		IHello hello = (IHello) new DynaProxyHello().bind(new Hello());// 如果我们需要日志功能，则使用代理类
		// IHello hello = new Hello();//如果我们不需要日志功能则使用目标类
		hello.sayHello("明天");
	}
}

